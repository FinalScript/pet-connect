/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query VerifyToken {\n    verifyToken {\n      valid\n    }\n  }\n": types.VerifyTokenDocument,
    "\n  query GetOwner {\n    getOwner {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Posts {\n            id\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n}\n": types.GetOwnerDocument,
    "\n  query GetOwnerById($id: String!) {\n    getOwnerById(id: $id) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n            ProfilePicture {\n              id\n              name\n              url\n              path\n              type\n            }\n          }\n          Posts {\n            id\n            petId\n            description\n            Media {\n              id\n              name\n              url\n              path\n              type\n            }\n            author {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n": types.GetOwnerByIdDocument,
    "\n  mutation Signup($username: String!, $name: String, $location: String, $profilePicture: MediaInput) {\n    signup(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n": types.SignupDocument,
    "\n  query OwnerUsernameExists($username: String!) {\n    validateUsername(username: $username) {\n      isAvailable\n    }\n  }\n": types.OwnerUsernameExistsDocument,
    "\n  mutation UpdateOwner($username: String, $name: String, $location: String, $profilePicture: MediaInput) {\n    updateOwner(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      name\n      username\n      location\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n": types.UpdateOwnerDocument,
    "\n  mutation CreatePet($username: String!, $name: String!, $type: PetType!, $description: String, $location: String, $profilePicture: MediaInput) {\n    createPet(username: $username, name: $name, type: $type, description: $description, location: $location, profilePicture: $profilePicture) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n": types.CreatePetDocument,
    "\n  query PetUsernameExists($username: String!) {\n    validatePetUsername(username: $username) {\n      isAvailable\n    }\n  }\n": types.PetUsernameExistsDocument,
    "\n  mutation UpdatePet($updatePetId: String, $username: String, $name: String, $type: PetType, $description: String, $location: String, $profilePicture: MediaInput) {\n    updatePet(\n      id: $updatePetId\n      username: $username\n      name: $name\n      type: $type\n      description: $description\n      location: $location\n      profilePicture: $profilePicture\n    ) {\n      username\n      name\n      type\n      description\n      location\n      id\n      OwnerId\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n": types.UpdatePetDocument,
    "\n  mutation DeletePet($deletePetId: String!) {\n    deletePet(id: $deletePetId) {\n      message\n    }\n  }\n": types.DeletePetDocument,
    "\n  query GetPetById($id: String!) {\n    getPetById(id: $id) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        Followers {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Posts {\n          id\n          petId\n          description\n          Media {\n            id\n            name\n            url\n            path\n            type\n          }\n          author {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n      }\n    }\n  }\n\n": types.GetPetByIdDocument,
    "\n  mutation FollowPet($id: String!) {\n    followPet(id: $id) {\n      success\n    }\n  }\n": types.FollowPetDocument,
    "\n  mutation UnfollowPet($id: String!) {\n    unfollowPet(id: $id) {\n      success\n    }\n  }\n": types.UnfollowPetDocument,
    "\n  query GetAllPosts {\n    getAllPosts {\n      posts {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n": types.GetAllPostsDocument,
    "\n  mutation CreatePost($petId: String!, $media: MediaInput!, $description: String) {\n    createPost(petId: $petId, media: $media, description: $description) {\n      post {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n": types.CreatePostDocument,
    "\nquery getPostsByPetId($petId: String!) {\n  getPostsByPetId(petId: $petId) {\n    posts {\n      id\n      petId\n      description\n      Media {\n        id\n        name\n        url\n        path\n        type\n      }\n      author {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n}": types.GetPostsByPetIdDocument,
    "\n  query GetFeed {\n    getFeed {\n      forYou {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n      }\n      following {\n        id\n        petId\n        description\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n": types.GetFeedDocument,
    "\n  query Search($search: String!) {\n    search(search: $search) {\n      results {\n        owners {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n": types.SearchDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VerifyToken {\n    verifyToken {\n      valid\n    }\n  }\n"): (typeof documents)["\n  query VerifyToken {\n    verifyToken {\n      valid\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOwner {\n    getOwner {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Posts {\n            id\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n}\n"): (typeof documents)["\n  query GetOwner {\n    getOwner {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Posts {\n            id\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOwnerById($id: String!) {\n    getOwnerById(id: $id) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n            ProfilePicture {\n              id\n              name\n              url\n              path\n              type\n            }\n          }\n          Posts {\n            id\n            petId\n            description\n            Media {\n              id\n              name\n              url\n              path\n              type\n            }\n            author {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOwnerById($id: String!) {\n    getOwnerById(id: $id) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n            ProfilePicture {\n              id\n              name\n              url\n              path\n              type\n            }\n          }\n          Posts {\n            id\n            petId\n            description\n            Media {\n              id\n              name\n              url\n              path\n              type\n            }\n            author {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n        }\n        FollowedPets {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Signup($username: String!, $name: String, $location: String, $profilePicture: MediaInput) {\n    signup(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Signup($username: String!, $name: String, $location: String, $profilePicture: MediaInput) {\n    signup(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      owner {\n        id\n        authId\n        name\n        username\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OwnerUsernameExists($username: String!) {\n    validateUsername(username: $username) {\n      isAvailable\n    }\n  }\n"): (typeof documents)["\n  query OwnerUsernameExists($username: String!) {\n    validateUsername(username: $username) {\n      isAvailable\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateOwner($username: String, $name: String, $location: String, $profilePicture: MediaInput) {\n    updateOwner(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      name\n      username\n      location\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOwner($username: String, $name: String, $location: String, $profilePicture: MediaInput) {\n    updateOwner(username: $username, name: $name, location: $location, profilePicture: $profilePicture) {\n      name\n      username\n      location\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePet($username: String!, $name: String!, $type: PetType!, $description: String, $location: String, $profilePicture: MediaInput) {\n    createPet(username: $username, name: $name, type: $type, description: $description, location: $location, profilePicture: $profilePicture) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePet($username: String!, $name: String!, $type: PetType!, $description: String, $location: String, $profilePicture: MediaInput) {\n    createPet(username: $username, name: $name, type: $type, description: $description, location: $location, profilePicture: $profilePicture) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PetUsernameExists($username: String!) {\n    validatePetUsername(username: $username) {\n      isAvailable\n    }\n  }\n"): (typeof documents)["\n  query PetUsernameExists($username: String!) {\n    validatePetUsername(username: $username) {\n      isAvailable\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePet($updatePetId: String, $username: String, $name: String, $type: PetType, $description: String, $location: String, $profilePicture: MediaInput) {\n    updatePet(\n      id: $updatePetId\n      username: $username\n      name: $name\n      type: $type\n      description: $description\n      location: $location\n      profilePicture: $profilePicture\n    ) {\n      username\n      name\n      type\n      description\n      location\n      id\n      OwnerId\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePet($updatePetId: String, $username: String, $name: String, $type: PetType, $description: String, $location: String, $profilePicture: MediaInput) {\n    updatePet(\n      id: $updatePetId\n      username: $username\n      name: $name\n      type: $type\n      description: $description\n      location: $location\n      profilePicture: $profilePicture\n    ) {\n      username\n      name\n      type\n      description\n      location\n      id\n      OwnerId\n      ProfilePicture {\n        id\n        name\n        url\n        path\n        type\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePet($deletePetId: String!) {\n    deletePet(id: $deletePetId) {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeletePet($deletePetId: String!) {\n    deletePet(id: $deletePetId) {\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPetById($id: String!) {\n    getPetById(id: $id) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        Followers {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Posts {\n          id\n          petId\n          description\n          Media {\n            id\n            name\n            url\n            path\n            type\n          }\n          author {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n      }\n    }\n  }\n\n"): (typeof documents)["\n  query GetPetById($id: String!) {\n    getPetById(id: $id) {\n      pet {\n        id\n        username\n        name\n        type\n        description\n        location\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        Followers {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n        Posts {\n          id\n          petId\n          description\n          Media {\n            id\n            name\n            url\n            path\n            type\n          }\n          author {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n      }\n    }\n  }\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation FollowPet($id: String!) {\n    followPet(id: $id) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation FollowPet($id: String!) {\n    followPet(id: $id) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UnfollowPet($id: String!) {\n    unfollowPet(id: $id) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation UnfollowPet($id: String!) {\n    unfollowPet(id: $id) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllPosts {\n    getAllPosts {\n      posts {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllPosts {\n    getAllPosts {\n      posts {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePost($petId: String!, $media: MediaInput!, $description: String) {\n    createPost(petId: $petId, media: $media, description: $description) {\n      post {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePost($petId: String!, $media: MediaInput!, $description: String) {\n    createPost(petId: $petId, media: $media, description: $description) {\n      post {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getPostsByPetId($petId: String!) {\n  getPostsByPetId(petId: $petId) {\n    posts {\n      id\n      petId\n      description\n      Media {\n        id\n        name\n        url\n        path\n        type\n      }\n      author {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery getPostsByPetId($petId: String!) {\n  getPostsByPetId(petId: $petId) {\n    posts {\n      id\n      petId\n      description\n      Media {\n        id\n        name\n        url\n        path\n        type\n      }\n      author {\n        id\n        username\n        name\n        type\n        description\n        location\n        Owner {\n          id\n          authId\n          name\n          username\n          location\n        }\n        ProfilePicture {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFeed {\n    getFeed {\n      forYou {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n      }\n      following {\n        id\n        petId\n        description\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFeed {\n    getFeed {\n      forYou {\n        id\n        petId\n        description\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n      }\n      following {\n        id\n        petId\n        description\n        author {\n          id\n          username\n          name\n          type\n          description\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n            Pets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n            FollowedPets {\n              id\n              username\n              name\n              type\n              description\n              location\n            }\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n        }\n        Media {\n          id\n          name\n          url\n          path\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Search($search: String!) {\n    search(search: $search) {\n      results {\n        owners {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Search($search: String!) {\n    search(search: $search) {\n      results {\n        owners {\n          id\n          authId\n          name\n          username\n          location\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n          Pets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n          FollowedPets {\n            id\n            username\n            name\n            type\n            description\n            location\n          }\n        }\n        pets {\n          id\n          username\n          name\n          type\n          description\n          location\n          Owner {\n            id\n            authId\n            name\n            username\n            location\n          }\n          Followers {\n            id\n            authId\n            name\n            username\n            location\n          }\n          ProfilePicture {\n            id\n            name\n            url\n            path\n            type\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;